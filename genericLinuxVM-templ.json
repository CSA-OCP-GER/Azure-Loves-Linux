{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "vmName": {
            "defaultValue": "myVm",
            "type": "string",
			"metadata": { "description": "Name to be assigned to the new VM" }
        },
         "vmType": {
            "defaultValue": "ubuntu",
            "type": "string",
			"allowedValues": [ "ubuntu", "centos" ],
			"metadata": { "description": "Type of VM. At this point only windows, ubuntu and centos supported" }
        },
         "vmSize": {
            "defaultValue": "Standard_A0",
            "type": "string",
			"allowedValues": [ "Standard_A0", "Standard_A1_v2", "Standard_D2_v3", "Standard_D2s_v3", "Standard_D1_v2", "Standard_DS1_v2" ],
			"metadata": { "description": "Size of the new VM. Only a limited subset of sizes are supported" }
        },
		"adminUsername": {
            "type": "string",
			"minLength": 1,
			"metadata": { "description": "Username to login to the VM, either over SSH for Linux VMs, or over RDP for Windows VMs" }
        },
		"adminPassword": {
            "type": "securestring",
			"minLength": 1,
			"metadata": { "description": "Password to login to the VM." }
        },
		"installExtension": {
			"type": "string",
			"allowedValues": [ "yes", "no" ],
			"minLength": 1,
			"metadata":{ "description": "Input yes to configure a custom extension according to the variables section" }
		}
    },
    "variables": {
		"vnetName": "myVnet",
		"vnetPrefix": "10.254.0.0/16",
		"subnet1Name": "subnet1Name",
		"subnet1Prefix": "10.254.1.0/24",
		"subnet2Name": "subnet2Name",
		"subnet2Prefix": "10.254.2.0/24",
		"vmTypeGroup": "[if(equals(parameters('vmType'), 'windows'), 'windows', 'linux')]",
		"diskType": "Standard_LRS",
		"diskSize": 32,
        "baseRepoURL": "https://raw.githubusercontent.com/CSA-OCP-GER/azure-loves-linux/master/",
		"customScriptHash": {
			"centos": "centosConfig.sh",
			"ubuntu": "ubuntuConfig.sh"
		},
		"customScript": "[if(equals(variables('vmTypeGroup'), 'linux'), variables('customScriptHash')[parameters('vmType')], '')]",
        "customScriptUri": "[concat(variables('baseRepoURL'), variables('customScript'))]",
        "customScriptCmd": "[concat('chmod 666 ', variables('customScript'), ' && /bin/sh ./', variables('customScript'))]",
		"avSetName": "[concat(parameters('vmName'), '-avSet')]",
        "nicName": "[concat(parameters('vmName'),'-nic')]",
        "nsgName": "[concat(parameters('vmName'),'-nsg')]",
		"pipName": "[concat(parameters('vmName'), '-pip')]",
		"diskName": "[concat(parameters('vmName'),'-osDisk')]",
		"vmStorageProfileHash": {
			"windows": {
				"imageReference": {
            		"publisher": "MicrosoftWindowsServer",
            		"offer": "WindowsServer",
            		"sku": "2012-R2-Datacenter",
            		"version": "latest"
				},
				"osDisk": {
					"osType": "Windows",
					"caching": "ReadWrite",
					"createOption": "FromImage",
					"name": "[variables('diskName')]",
					"diskSizeGb": "[variables('diskSize')]",
					"managedDisk": {
						"storageAccountType": "[variables('diskType')]"
					}
				},
				"dataDisks": []
			},
			"ubuntu": {
				"imageReference": {
					"publisher": "Canonical",
					"offer": "UbuntuServer",
					"sku": "16.04.0-LTS",
					"version": "latest"
				},
				"osDisk": {
					"osType": "Linux",
					"caching": "ReadWrite",
					"name": "[variables('diskName')]",
					"diskSizeGb": "[variables('diskSize')]",
					"createOption": "FromImage",
					"managedDisk": {
						"storageAccountType": "[variables('diskType')]"
					}
				},
				"dataDisks": []
			},
			"centos": {
                    "imageReference": {
                        "publisher": "OpenLogic",
                        "offer": "CentOS",
                        "sku": "7.3",
                        "version": "latest"
                    },
                    "osDisk": {
                        "osType": "Linux",
                        "caching": "ReadWrite",
                        "name": "[variables('diskName')]",
                        "diskSizeGb": "[variables('diskSize')]",
                        "createOption": "FromImage",
                        "managedDisk": {
                            "storageAccountType": "[variables('diskType')]"
                        }
                    },
                    "dataDisks": []
			}
		},
		"vmStorageProfile": "[variables('vmStorageProfileHash')[parameters('vmType')]]",
		"vmOsProfileHash": {
			"windows": {
				"computerName": "[parameters('vmName')]",
				"adminUsername": "[parameters('adminUsername')]",
				"adminPassword": "[parameters('adminPassword')]"
			},
			"linux": {
				"computerName": "[parameters('vmName')]",
				"adminUsername": "[parameters('adminUsername')]",
				"linuxConfiguration": {
					"disablePasswordAuthentication": false
				},
				"secrets": [],
				"adminPassword": "[parameters('adminPassword')]"				
			}
		},
		"vmOsProfile": "[variables('vmOsProfileHash')[variables('vmTypeGroup')]]",
		"vmApiVersion": "2017-03-30",
        "networkApiVersion": "2017-06-01"
	},
    "resources": [
		{
			"comments": "Create vnet with 2 subnets",
			"type": "Microsoft.Network/virtualNetworks",
			"name": "[variables('vnetName')]",
			"apiVersion": "[variables('networkApiVersion')]",
			"location": "[resourceGroup().location]",
			"properties": {
				"addressSpace": {
					"addressPrefixes": [
						"[variables('vnetPrefix')]"
					]
				},
				"subnets": [
					{
						"name": "[variables('subnet1Name')]",
						"properties": {
							"addressPrefix": "[variables('subnet1Prefix')]"
						}
					},
					{
						"name": "[variables('subnet2Name')]",
						"properties": {
							"addressPrefix": "[variables('subnet2Prefix')]"
						}
					}
				]
			},
			"resources": [],
			"dependsOn": []
		},
        {
            "comments": "Public IP address",
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[variables('pipName')]",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "publicIPAllocationMethod": "Dynamic",
                "idleTimeoutInMinutes": 4
            },
            "resources": [],
            "dependsOn": []
        },
		{
			"comments": "Deploy Virtual Machine",
			"type": "Microsoft.Compute/virtualMachines",
			"name": "[parameters('vmName')]",
			"apiVersion": "[variables('vmApiVersion')]",
			"location": "[resourceGroup().location]",
			"properties": {
				"availabilitySet": {
					"id": "[resourceId('Microsoft.Compute/availabilitySets', variables('avSetName'))]"
				},
				"hardwareProfile": {
					"vmSize": "[parameters('vmSize')]"
				},
				"storageProfile": "[variables('vmStorageProfile')]",
				"osProfile": "[variables('vmOsProfile')]",
				"networkProfile": {
					"networkInterfaces": [
						{
							"id": "[resourceId('Microsoft.Network/networkInterfaces', variables('nicName'))]",
							"properties": {
								"primary": true
							}
						}
					]
				}
			},
			"resources": [],
			"dependsOn": [
				"[variables('nicName')]",
				"[variables('avSetName')]"
			]
		},
		{
			"comments": "Create Linux custom extension, if the VM is a Linux one, and if the parameter installExtension is yes",
			"type": "Microsoft.Compute/virtualMachines/extensions",
			"name": "[concat(parameters('vmName'), '/installcustomscript')]",
			"condition": "[and(equals(variables('vmTypeGroup'), 'linux'), equals(parameters('installExtension'), 'yes'))]",
			"apiVersion": "[variables('vmApiVersion')]",
			"location": "[resourceGroup().location]",
			"properties": {
				"publisher": "Microsoft.Azure.Extensions",
				"type": "CustomScript",
				"typeHandlerVersion": "2.0",
				"autoUpgradeMinorVersion": true,
				"settings": {
					"fileUris": [
						"[variables('customScriptUri')]"
					],
					"commandToExecute": "[variables('customScriptCmd')]"
				}
			},
			"dependsOn": [
				"[parameters('vmName')]"
			]
		},
		{
			"type": "Microsoft.Compute/availabilitySets",
			"name": "[variables('avSetName')]",
			"apiVersion": "[variables('vmApiVersion')]",
			"location": "[resourceGroup().location]",
			"properties": {
				"platformUpdateDomainCount": 2,
				"platformFaultDomainCount": 2
			},
			"sku": {
				"name": "Aligned"
			}
		},
		{
			"comments": "Create Network Interface Card, associated to the NSG",
			"type": "Microsoft.Network/networkInterfaces",
			"name": "[variables('nicName')]",
			"apiVersion": "[variables('networkApiVersion')]",
			"location": "[resourceGroup().location]",
			"properties": {
				"ipConfigurations": [
					{
						"name": "[concat(parameters('vmName'), '-ipconfig1')]",
						"properties": {
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('pipName'))]"
                            },
							"privateIPAllocationMethod": "Dynamic",
							"subnet": {
								"id": "[concat(resourceId('Microsoft.Network/virtualNetworks', variables('vnetName')), '/subnets/', variables('subnet1Name'))]"
							}
						}
					}
				],
				"dnsSettings": {
					"dnsServers": []
				},
				"enableIPForwarding": false,
				"networkSecurityGroup": {
					"id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat(variables('nsgName'), '-', variables('vmTypeGroup')))]"
				}
			},
			"resources": [],
			"dependsOn": [
				"[concat(variables('nsgName'), '-', variables('vmTypeGroup'))]",
				"[variables('vnetName')]",
				"[variables('pipName')]"
			]
		},
		{
			"comments": "Create a Linux NSG, in case the VM to be provisioned is a Linux machine",
			"type": "Microsoft.Network/networkSecurityGroups",
			"name": "[concat(variables('nsgName'),'-linux')]",
			"condition": "[equals(variables('vmTypeGroup'),'linux')]",
			"apiVersion": "[variables('networkApiVersion')]",
			"location": "[resourceGroup().location]",
			"properties": {
				"securityRules": [
					{
						"name": "SSH",
						"properties": {
							"protocol": "Tcp",
							"sourcePortRange": "*",
							"destinationPortRange": "22",
							"sourceAddressPrefix": "*",
							"destinationAddressPrefix": "*",
							"access": "Allow",
							"priority": 100,
							"direction": "Inbound"
						}
					},
					{
						"name": "Web",
						"properties": {
							"protocol": "Tcp",
							"sourcePortRange": "*",
							"destinationPortRange": "80",
							"sourceAddressPrefix": "*",
							"destinationAddressPrefix": "*",
							"access": "Allow",
							"priority": 110,
							"direction": "Inbound"
						}
					}
				]
			},
			"resources": [],
			"dependsOn": []
		},
		{
			"comments": "Create a Windows NSG, in case the VM to be provisioned is a Windows machine",
			"type": "Microsoft.Network/networkSecurityGroups",
			"name": "[concat(variables('nsgName'),'-windows')]",
			"condition": "[equals(variables('vmTypeGroup'),'windows')]",
			"apiVersion": "[variables('networkApiVersion')]",
			"location": "[resourceGroup().location]",
			"properties": {
				"securityRules": [
					{
						"name": "default-allow-rdp",
						"properties": {
							"protocol": "Tcp",
							"sourcePortRange": "*",
							"destinationPortRange": "3389",
							"sourceAddressPrefix": "*",
							"destinationAddressPrefix": "*",
							"access": "Allow",
							"priority": 100,
							"direction": "Inbound"
						}
					}
				]
			},
			"resources": [],
			"dependsOn": []
		}
    ]
}